"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var L = require("leaflet");
var react_leaflet_1 = require("react-leaflet");
require("leaflet.gridlayer.googlemutant");
var GoogleMapsLoader = require("google-maps");
var ReactLeafletGoogleLayer = /** @class */ (function (_super) {
    __extends(ReactLeafletGoogleLayer, _super);
    function ReactLeafletGoogleLayer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ReactLeafletGoogleLayer.prototype.createLeafletElement = function (props) {
        var useGoogMapsLoader = props.useGoogMapsLoader, googleMapsLoaderConf = props.googleMapsLoaderConf, leaflet = props.leaflet, googleMutantProps = __rest(props, ["useGoogMapsLoader", "googleMapsLoaderConf", "leaflet"]);
        if (useGoogMapsLoader) {
            var googleMapsLoader = GoogleMapsLoader;
            googleMapsLoader = Object.assign(googleMapsLoader, googleMapsLoaderConf);
            googleMapsLoader.load();
        }
        this.leafletElement = L.gridLayer.googleMutant(googleMutantProps);
        return this.leafletElement;
    };
    ReactLeafletGoogleLayer.prototype.updateLeafletElement = function (prevProps, nextProps) {
        var opacity = nextProps.opacity, zIndex = nextProps.zIndex;
        if (opacity !== undefined && opacity !== prevProps.opacity) {
            this.leafletElement.setOpacity(opacity);
        }
        if (zIndex !== undefined && zIndex !== prevProps.zIndex) {
            this.leafletElement.setZIndex(zIndex);
        }
    };
    ReactLeafletGoogleLayer.defaultProps = {
        useGoogMapsLoader: true,
        googleMapsLoaderConf: { VERSION: undefined },
    };
    return ReactLeafletGoogleLayer;
}(react_leaflet_1.GridLayer));
exports.default = react_leaflet_1.withLeaflet(ReactLeafletGoogleLayer);
